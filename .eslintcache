[{"E:\\Internshala\\project\\src\\index.jsx":"1","E:\\Internshala\\project\\src\\components\\App.jsx":"2","E:\\Internshala\\project\\src\\components\\Homepage.jsx":"3","E:\\Internshala\\project\\src\\components\\Board.jsx":"4","E:\\Internshala\\project\\src\\components\\SignupForm.jsx":"5","E:\\Internshala\\project\\src\\components\\LoginForm.jsx":"6","E:\\Internshala\\project\\src\\components\\ModalOne.jsx":"7","E:\\Internshala\\project\\src\\components\\List.jsx":"8","E:\\Internshala\\project\\src\\components\\ModalTwo.jsx":"9"},{"size":271,"mtime":1610905281806,"results":"10","hashOfConfig":"11"},{"size":591,"mtime":1610905376872,"results":"12","hashOfConfig":"11"},{"size":726,"mtime":1610952695081,"results":"13","hashOfConfig":"11"},{"size":1814,"mtime":1610908117828,"results":"14","hashOfConfig":"11"},{"size":2077,"mtime":1610953271083,"results":"15","hashOfConfig":"11"},{"size":2307,"mtime":1610953257393,"results":"16","hashOfConfig":"11"},{"size":670,"mtime":1610905119970,"results":"17","hashOfConfig":"11"},{"size":3446,"mtime":1610945791015,"results":"18","hashOfConfig":"11"},{"size":1175,"mtime":1610945815053,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1qp113c",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"E:\\Internshala\\project\\src\\index.jsx",[],["41","42"],"E:\\Internshala\\project\\src\\components\\App.jsx",[],"E:\\Internshala\\project\\src\\components\\Homepage.jsx",[],"E:\\Internshala\\project\\src\\components\\Board.jsx",["43"],"import React, { useEffect, useState } from 'react';\r\nimport axios from \"axios\";\r\nimport List from './List';\r\nimport ModalOne from './ModalOne';\r\nimport '../styles/Board.css';\r\n\r\nconst Board = () => {\r\n    const [Cards, setCards] = useState([]);\r\n    const [showModal,setShowModal] = useState(false);\r\n    const[imgUrl,setImgUrl] = useState('');\r\n    useEffect(() => {\r\n        axios.get('https://picsum.photos/id/77/info').\r\n            then((res) => setImgUrl(res.data.download_url));\r\n    }, []);\r\n    const closeModal = ()=>{\r\n        setShowModal(false);\r\n    };\r\n\r\n    const openModal = ()=>{\r\n        setShowModal(true);\r\n    };\r\n\r\n    const addListCard = (text) => {\r\n        setCards((prev)=>{\r\n            return [...prev,text]\r\n        })\r\n    };\r\n\r\n    const getListName = (text)=>{\r\n        addListCard(text);\r\n    };\r\n    return (\r\n        <>\r\n            {showModal?<ModalOne close = {closeModal} show = {showModal} getData = {getListName} /> : null}\r\n            {showModal?<div className=\"overlay\"></div> : null}\r\n            <div id=\"board\">\r\n                <header className=\"board-header\">\r\n                    <h2>TasksBoard</h2>\r\n                    <img id='profile-img' src={imgUrl} alt=\"pic\" />\r\n                </header>\r\n                <main className=\"board-container\">\r\n                    {\r\n                        Cards.map((name,index) => {\r\n                            return (\r\n                                <List key={index} text = {name} />\r\n                            )\r\n                        })\r\n                    }\r\n                </main>\r\n                <button className=\"add-list-btn\" onClick={openModal}>\r\n                    <i className=\"fa fa-plus-circle\"></i>\r\n                </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Board;\r\n","E:\\Internshala\\project\\src\\components\\SignupForm.jsx",[],"E:\\Internshala\\project\\src\\components\\LoginForm.jsx",["44","45"],"E:\\Internshala\\project\\src\\components\\ModalOne.jsx",[],"E:\\Internshala\\project\\src\\components\\List.jsx",["46"],"import React, { useState } from 'react';\r\nimport ModalTwo from './ModalTwo';\r\n\r\nconst List = (props) => {\r\n    const [value,setValue] = useState(\"\");\r\n    const [tasks,setTasks] = useState([]);\r\n    const [showEdit,setShowEdit] = useState(false);\r\n    const [currentIdx,setCurrentIdx] = useState(0);\r\n\r\n    const handleChange = (e)=>{\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const addTask = ()=>{\r\n        const info = {\r\n            title : value,\r\n            date : '',\r\n            desc : ''\r\n        }\r\n        setTasks((prev)=>{\r\n            return [...prev,info];\r\n        });\r\n        setValue(\"\");\r\n    };\r\n\r\n    const handleCheck = (e)=>{\r\n        const chkbtn = e.target;\r\n        if(chkbtn.classList.contains('fa-circle-thin')){\r\n            chkbtn.classList.replace('fa-circle-thin','fa-check-circle');\r\n            chkbtn.nextSibling.style.textDecoration = \"line-through\";\r\n        }else{\r\n            chkbtn.classList.replace('fa-check-circle', 'fa-circle-thin');\r\n            chkbtn.nextSibling.style.textDecoration = \"none\";\r\n        }\r\n    };\r\n\r\n    const closeEdit = ()=>{\r\n        setShowEdit(false);\r\n    };\r\n\r\n    const handleEdit = (e) => {\r\n        setShowEdit(true);\r\n        const index = e.target.getAttribute(\"id\");\r\n        setCurrentIdx(index);\r\n    };\r\n\r\n    const handleSave = (data)=>{\r\n        let newTasks = tasks;\r\n        newTasks[currentIdx].date = data.date;\r\n        newTasks[currentIdx].desc = data.desc;\r\n        setTasks(newTasks);\r\n    };\r\n\r\n    const handleDelete = ()=>{\r\n        let newTasks = tasks.filter((task,index)=>{\r\n            return(currentIdx!=index)\r\n        });\r\n        setTasks(newTasks);\r\n    }\r\n    return (\r\n        <>\r\n        {showEdit? <ModalTwo  title={tasks[currentIdx].title} close={closeEdit} save = {handleSave} delete={handleDelete}/> : null }\r\n        {showEdit ? <div className=\"overlay\"></div> : null}\r\n        <div className=\"list-card\">\r\n            <h3>{props.text}</h3>\r\n            <div className=\"input-container\">\r\n                <input type=\"text\"  placeholder=\"New Task\" id=\"task-item\" value={value} onChange={handleChange}/>\r\n                <button className=\"add-task-btn\" onClick = {addTask}>\r\n                    <i className=\"fa fa-plus-circle\"></i>\r\n                </button>\r\n            </div>\r\n            <div className=\"task-container\">\r\n                <ul className=\"task-list\">\r\n                    {\r\n                        tasks.map((task,index) => {\r\n                            return (\r\n                                <div>\r\n                                    <div className=\"task-list-item\">\r\n                                        <i className=\"fa fa-circle-thin\" onClick={(e) => handleCheck(e)}></i>\r\n                                        <li>{task.title}</li>\r\n                                        <i className=\"fa fa-edit\" id={index} onClick={handleEdit}></i>\r\n                                    </div>\r\n                                    <div className=\"task-info\">\r\n                                        <p className=\"task-desc\">{task.desc}</p>\r\n                                        <p className=\"task-date\"><em>{task.date}</em></p>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default List\r\n","E:\\Internshala\\project\\src\\components\\ModalTwo.jsx",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":12,"column":54,"nodeType":"53","messageId":"54","endLine":12,"endColumn":55,"fix":"55"},{"ruleId":"56","severity":1,"message":"57","line":2,"column":9,"nodeType":"58","messageId":"59","endLine":2,"endColumn":13},{"ruleId":"60","severity":1,"message":"61","line":50,"column":21,"nodeType":"62","endLine":50,"endColumn":33},{"ruleId":"63","severity":1,"message":"64","line":56,"column":30,"nodeType":"65","messageId":"66","endLine":56,"endColumn":32},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],"dot-location","Expected dot to be on same line as property.","MemberExpression","expectedDotBeforeProperty",{"range":"69","text":"70"},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",[422,437],"\r\n            ."]